<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <!-- 自定义凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.cug.lab.credentials.RetryLimitHashedCredentialsMatcher">
        <!--密码加密算法 迭代次数-->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 自定义Realm实现 -->
    <bean id="userRealm" class="com.cug.lab.realm.UserRealm">
        <!-- 设置自定义凭证匹配器 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!--禁用掉了cache-->
        <property name="cachingEnabled" value="false"/>
    </bean>

<!--========================================================================================-->

    <!-- 会话ID生成器 -->
    <!-- 用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成。-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话DAO -->
    <!-- EnterpriseCacheSessionDAO
         提供了缓存功能的会话维护，默认情况下使用MapCache实现，
         内部使用ConcurrentHashMap保存缓存的会话。
    -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!-- 设置session缓存的名字，这个名字可以任意 -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <!-- 定义该Session DAO操作中所使用的ID生成器 -->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器 用于定期的验证会话是否已过期-->
    <!-- QuartzSessionValidationScheduler ：使用Quartz会话验证调度器-->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!--sessionValidationInterval ：设置session的失效扫描间隔，单位为毫秒-->
        <property name="sessionValidationInterval" value="1800000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 ： 即下面的配置 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <!--
        DefaultWebSessionManager：
        替代ServletContainerSessionManager，自己维护着会话，直接废弃了容器的会话；
        在Servlet容器中，默认使用JSESSIONID Cookie维护会话，且会话默认是跟容器绑定的；
        在某些情况下可能需要使用自己的会话机制，此时我们可以使用DefaultWebSessionManager来维护会话：
    -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 设置会话的全局过期时间（毫秒为单位），默认30分钟：-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 会话过期时不想删除过期的会话 可设置为false-->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 是否开启会话验证器，默认是开启的；-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 指向会话验证调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 用于会话的CRUD -->
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

<!--========================================================================================-->


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--配置定义的realm 会话管理器-->
        <property name="realm" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


    <!--========================================================================================-->

    <!-- 基于Form表单的身份验证过滤器 -->
    <!-- 基于表单的拦截器；如“/**=authc”，如果没有登录会跳到相应的登录页面登录；
    -->
    <!--
    -
    -
    -
    -MyFormAuthenticationFilter
    -
    -
    -
    -
    -
    -
    -
    -
    -好像表单中不能改  - 要做的是把user类改为userName he passWord
    -
    -
    -
    -
    -
    先恢复了 初始  后面再继续改 -->
    <bean id="formAuthenticationFilter" class="com.cug.lab.filter.MyFormAuthenticationFilter">
        <property name="usernameParam" value="userName"/>
        <property name="passwordParam" value="userPsd"/>
    </bean>

    <!--自定义过滤器-->
    <bean id="sysUserFilter" class="com.cug.lab.filter.SysUserFilter"/>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.page"/>
        <!-- successUrl配置只是做为一种附加配置，只有session中没有用户请求地址时才会使用successUrl。
             系统默认的是认证成功后跳转到上一次请求的路径，如果是首次请求，那shiro就会跳转到默认虚拟路径“/”，
             也就是跳转到index.jsp。 本项目已经重写了FormAuthenticationFilter并设置了默认的成功界面
        -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <!--自定义的过滤器-->
                <entry key="sysUser" value-ref="sysUserFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                <!--加载静态资源-->
                /static/** = anon
                /login.page = authc
                /logout.page = logout
                /authenticated.page = authc
                /register.page = authc
                <!--所有的请求都要经过验证和满足自定的过滤器-->
                /** = user,sysUser
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>